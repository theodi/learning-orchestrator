<%- include('../../partials/header') %>
<section class="content-block light-grey">
  <div class="container">
    <div class="jumbotron">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="text-primary"><span class="fa fa-calendar"></span>Booking Details</h1>
        <div>

          <a href="/course-bookings" class="btn btn-secondary">
            <span class="fa fa-arrow-left"></span> Back to Bookings
          </a>
        </div>
      </div>

      <!-- Integration Sections -->
      <div class="row">
        <!-- HubSpot Section -->
        <div class="col-md-4">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h5 class="mb-0"><i class="fa fa-building"></i> HubSpot Deal</h5>
            </div>
            <div class="card-body">
              <div id="hubspotLoading" class="text-center">
                <div class="spinner-border text-primary" role="status">
                </div>
                <p class="mt-2">Loading HubSpot data...</p>
              </div>
              <div id="hubspotContent" style="display: none;">
                <div id="hubspotError" class="alert alert-danger" style="display: none;"></div>
                <div id="hubspotData">
                  <table class="table table-sm table-borderless mb-3">
                    <tbody>
                      <tr><td><strong>Deal Name:</strong></td><td><span id="dealName">-</span></td></tr>
                      <tr><td><strong>Deal Owner:</strong></td><td><span id="dealOwner">-</span></td></tr>
                      <tr><td><strong>Company:</strong></td><td><span id="companyName">-</span></td></tr>
                      <tr><td><strong>Contact:</strong></td><td><span id="contactName">-</span></td></tr>
                      <tr><td><strong>Value:</strong></td><td><span id="dealValue">-</span></td></tr>
                      <tr><td><strong>Pipeline:</strong></td><td><span id="dealPipeline">-</span></td></tr>
                      <tr><td><strong>Stage:</strong></td><td><span id="dealStage">-</span></td></tr>
                      
                    </tbody>
                  </table>
                  <div class="text-center">
                    <a id="hubspotLink" href="#" target="_blank" class="btn btn-sm btn-outline-primary">View in HubSpot</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Forecast Section -->
        <div class="col-md-4">
          <div class="card">
            <div class="card-header bg-success text-white">
              <h5 class="mb-0"><i class="fa fa-tasks"></i> Forecast Project</h5>
            </div>
            <div class="card-body">
              <div id="forecastLoading" class="text-center">
                <div class="spinner-border text-success" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-2">Loading Forecast data...</p>
              </div>
              <div id="forecastContent" style="display: none;">
                <div id="forecastError" class="alert alert-danger" style="display: none;"></div>
                <div id="forecastData">
                  <table class="table table-sm table-borderless mb-3">
                    <tbody>
                      <tr><td><strong>Project Name:</strong></td><td><span id="projectName">-</span></td></tr>
                      <tr><td><strong>Status:</strong></td><td><span id="projectStatus">-</span></td></tr>
                      <tr><td><strong>Start Date:</strong></td><td><span id="projectStart">-</span></td></tr>
                      <tr><td><strong>End Date:</strong></td><td><span id="projectEnd">-</span></td></tr>
                      <tr><td><strong>Budget:</strong></td><td><span id="projectBudget">-</span></td></tr>
                    </tbody>
                  </table>
                  <div class="text-center">
                    <a id="forecastLink" href="#" target="_blank" class="btn btn-sm btn-outline-success">View in Forecast</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Google Calendar Section -->
        <div class="col-md-4">
          <div class="card">
            <div class="card-header bg-info text-white">
              <h5 class="mb-0"><i class="fa fa-calendar"></i> Google Calendar</h5>
            </div>
            <div class="card-body">
              <div id="calendarLoading" class="text-center">
                <div class="spinner-border text-info" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-2">Loading Calendar data...</p>
              </div>
              <div id="calendarContent" style="display: none;">
                <div id="calendarError" class="alert alert-danger" style="display: none;"></div>
                <div id="calendarData">
                  <table class="table table-sm table-borderless mb-3">
                    <tbody>
                      <tr><td><strong>Event Summary:</strong></td><td><span id="eventSummary">-</span></td></tr>
                      <tr><td><strong>Start Time:</strong></td><td><span id="eventStart">-</span></td></tr>
                      <tr><td><strong>End Time:</strong></td><td><span id="eventEnd">-</span></td></tr>
                      <tr><td><strong>Location:</strong></td><td><span id="eventLocation">-</span></td></tr>
                      <tr><td><strong>Description:</strong></td><td><span id="eventDescription">-</span></td></tr>
                    </tbody>
                  </table>
                  <div class="text-center">
                    <a id="calendarLink" href="#" target="_blank" class="btn btn-sm btn-outline-info">View in Calendar</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <% /* Self-paced learner status section (hidden by default, shown when HubSpot includes_self_paced_courses is true) */ %>
<div id="selfPacedSection" style="display:none" class="container mb-5">
  <div class="card mt-4">
    <div class="card-header bg-warning text-dark">
      <h5 class="mb-0"><i class="fa fa-users"></i> Self-Paced Learners Status</h5>
    </div>
    <div class="card-body">
      <div id="spLearnersLoading" class="text-center" style="display:none;">
        <div class="spinner-border text-warning" role="status">
        </div>
        <p class="mt-2">Loading learners and course status...</p>
      </div>
      <div id="spLearnersError" class="alert alert-danger" style="display:none;"></div>
      <div id="spLearnersContent" style="display:none;">
        <div id="spLearnersCards"></div>
        
      </div>
    </div>
  </div>
</div>
</section>

<script>
$(document).ready(function() {
  const hubspotDealId = '<%= booking.hubspot_deal_id %>';
  const forecastProjectId = '<%= booking.forecast_project_id %>';
  const forecastProjectUrl = '<%= booking.forecast_project_url %>';
  const googleCalendarEventId = '<%= booking.google_calendar_event_id %>';
  const googleCalendarUrl = '<%= booking.google_calendar_url %>';

  // Load HubSpot data
  if (hubspotDealId) {
    loadHubSpotData(hubspotDealId);
  } else {
    showNoData('hubspot', 'No HubSpot deal created');
  }

  // Load Forecast data (fallback to URL-only link)
  if (forecastProjectId) {
    loadForecastData(forecastProjectId);
  } else if (forecastProjectUrl) {
    // We have a URL but no ID: just show the section so the button is usable
    $('#forecastLoading').hide();
    $('#forecastContent').show();
    // Keep existing button; no need to inject a message
  } else {
    showNoData('forecast', 'No Forecast project created');
  }

  // Load Calendar data (fallback to URL-only link)
  if (googleCalendarEventId) {
    loadCalendarData(googleCalendarEventId);
  } else if (googleCalendarUrl) {
    // We have a URL but no ID: just show the section so the button is usable
    $('#calendarLoading').hide();
    $('#calendarContent').show();
    // Keep existing button; no need to inject a message
  } else {
    showNoData('calendar', 'No Calendar event created');
  }
  

  // Set up external links
  $('#hubspotLink').attr('href', '<%= booking.hubspot_deal_url %>');
  $('#forecastLink').attr('href', '<%= booking.forecast_project_url %>');
  $('#calendarLink').attr('href', '<%= booking.google_calendar_url %>');

  function loadHubSpotData(dealId) {
    fetch(`/hubspot/deals/${dealId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.data) {
          const deal = data.data;
          $('#dealName').text(deal.properties?.dealname || 'N/A');
          $('#companyName').text(deal.properties?.company_details?.properties?.name || 'N/A');
          $('#contactName').text(
            deal.properties?.contact_details?.properties?.firstname && deal.properties?.contact_details?.properties?.lastname 
              ? `${deal.properties.contact_details.properties.firstname} ${deal.properties.contact_details.properties.lastname}`
              : 'N/A'
          );
          $('#dealValue').text(deal.properties?.amount ? `Â£${deal.properties.amount}` : 'N/A');
          $('#dealStage').text(deal.properties?.stage_details?.label || deal.properties?.dealstage || 'N/A');
          $('#dealPipeline').text(deal.properties?.pipeline_details?.label || deal.properties?.pipeline || 'N/A');
          $('#dealOwner').text(
            deal.properties?.owner_details?.firstName && deal.properties?.owner_details?.lastName
              ? `${deal.properties.owner_details.firstName} ${deal.properties.owner_details.lastName}`
              : 'N/A'
          );
          
          const includesSelfPacedRaw = deal.properties?.includes_self_paced_courses;
          const includesSelfPaced = (
            includesSelfPacedRaw === true ||
            (typeof includesSelfPacedRaw === 'string' && ['true','yes','1','y'].includes(includesSelfPacedRaw.toLowerCase()))
          );
          if (includesSelfPaced) {
            $('#selfPacedSection').show();
            loadLearnerMatrix(dealId);
          }
          showContent('hubspot');
        } else {
          showError('hubspot', 'Failed to load HubSpot data');
        }
      })
      .catch(error => {
        showError('hubspot', `Error: ${error.message}`);
      });
  }

  function loadForecastData(projectId) {
    fetch(`/forecast/projects/${projectId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.data) {
          const project = data.data;
          $('#projectName').text(project.name || 'N/A');
          $('#projectClient').text(project.client?.name || 'N/A');
          $('#projectStatus').text(project.status || 'N/A');
          $('#projectStart').text(project.start_date ? new Date(project.start_date).toLocaleDateString('en-GB') : 'N/A');
          $('#projectEnd').text(project.end_date ? new Date(project.end_date).toLocaleDateString('en-GB') : 'N/A');
          $('#projectBudget').text(project.budget ? `Â£${project.budget}` : 'N/A');
          showContent('forecast');
        } else {
          showError('forecast', 'Failed to load Forecast data');
        }
      })
      .catch(error => {
        showError('forecast', `Error: ${error.message}`);
      });
  }

  function loadCalendarData(eventId) {
    fetch(`/calendar/events/${eventId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.data) {
          const event = data.data;
          $('#eventSummary').text(event.summary || 'N/A');
          $('#eventStart').text(event.start?.dateTime ? new Date(event.start.dateTime).toLocaleString('en-GB') : 'N/A');
          $('#eventEnd').text(event.end?.dateTime ? new Date(event.end.dateTime).toLocaleString('en-GB') : 'N/A');
          $('#eventLocation').text(event.location || 'N/A');
          $('#eventDescription').text(event.description || 'N/A');
          showContent('calendar');
        } else {
          showError('calendar', 'Failed to load Calendar data');
        }
      })
      .catch(error => {
        showError('calendar', `Error: ${error.message}`);
      });
  }

  function showContent(section) {
    $(`#${section}Loading`).hide();
    $(`#${section}Content`).show();
  }

  function showError(section, message) {
    $(`#${section}Loading`).hide();
    $(`#${section}Content`).show();
    $(`#${section}Error`).text(message).show();
    $(`#${section}Data`).hide();
  }

  function showNoData(section, message) {
    $(`#${section}Loading`).hide();
    $(`#${section}Content`).show();
    $(`#${section}Data`).html(`<p class="text-muted">${message}</p>`);
  }

  // Self-paced learner status section (vertical layout)
  function loadLearnerMatrix(dealId) {
    $('#spLearnersLoading').show();
    $('#spLearnersContent').hide();
    fetch(`/hubspot/deals/${dealId}/learner-status`)
      .then(r => r.json())
      .then(payload => {
        if (!payload.success) throw new Error(payload.message || 'Failed to fetch learner status');
        const learners = payload.data.learners || [];

        const container = $('#spLearnersCards');
        container.empty();
        learners.forEach(l => {
          const card = $(
            '<div class="card mb-3">\
              <div class="card-header d-flex justify-content-between align-items-center">\
                <div>\
                  <h5 class="mb-0 sp-learner-name">' + (l.name || 'Learner') + '</h5>\
                  <small class="text-muted sp-learner-email">' + l.email + '</small>\
                </div>\
                <div class="sp-learner-actions"></div>\
              </div>\
              <div class="card-body">\
                <div class="table-responsive">\
                  <table class="table table-sm table-striped">\
                    <thead>\
                      <tr>\
                        <th>Course</th>\
                        <th>Enrolled</th>\
                        <th>Accessed</th>\
                      </tr>\
                    </thead>\
                    <tbody></tbody>\
                  </table>\
                </div>\
              </div>\
            </div>'
          );
          // Determine if any course needs attention (not enrolled or not accessed)
          const needsEmail = (l.courses || []).some(c => !(!!c.enrolled && !!c.accessed));
          if (needsEmail) {
            const headerBtn = $('<button class="btn btn-sm btn-outline-secondary" type="button">Email instuctions to learner</button>');
            headerBtn.on('click', async function() {
              try {
                headerBtn.prop('disabled', true).text('Sending...');
                const payload = {
                  deal_id: hubspotDealId,
                  contact_email: l.email,
                  learner_name: l.name || 'Learner',
                  courses: (l.courses || []).map(c => ({
                    course_id: c.course_id,
                    course_name: c.course_name,
                    enrolled: !!c.enrolled,
                    accessed: !!c.accessed
                  }))
                };
                const resp = await fetch(`/hubspot/deals/${hubspotDealId}/remind-learner`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(payload)
                });
                const data = await resp.json();
                if (!resp.ok || !data.success) {
                  throw new Error(data.message || 'Failed to send');
                }
                
                // Update button state
                const emailType = data.data?.emailType || 'email';
                const subject = data.data?.subject || '';
                headerBtn.removeClass('btn-outline-secondary').addClass('btn-success')
                  .text(`${emailType === 'welcome' ? 'Welcome' : 'Reminder'} sent`);
                
                // Refresh email history for this specific learner
                refreshLearnerEmailHistory(hubspotDealId, l.email);
                
              } catch (err) {
                alert('Failed to send email: ' + err.message);
                headerBtn.prop('disabled', false).text('Email instructions to learner');
              }
            });
            card.find('.sp-learner-actions').append(headerBtn);
          } else {
            card.find('.sp-learner-actions').html('<span class="text-muted">All good</span>');
          }
          const tbody = card.find('tbody');
          (l.courses || []).forEach(c => {
            const enrolled = !!c.enrolled;
            const accessed = !!c.accessed;
            const tr = $('<tr/>');
            tr.append(`<td>${c.course_name || ('Course #' + c.course_id)}</td>`);
            tr.append(`<td>${enrolled ? '<span class="text-success">Yes</span>' : '<span class="text-muted">No</span>'}</td>`);
            tr.append(`<td>${accessed ? '<span class="text-success">Yes</span>' : '<span class="text-muted">No</span>'}</td>`);
            tbody.append(tr);
          });
          container.append(card);
        });

        $('#spLearnersLoading').hide();
        $('#spLearnersContent').show();

        // Fetch and render email history per learner
        loadLearnerEmailHistory(dealId);
      })
      .catch(err => {
        $('#spLearnersLoading').hide();
        $('#spLearnersError').text(err.message).show();
        $('#spLearnersContent').show();
      });
  }

  function loadLearnerEmailHistory(dealId) {
    fetch(`/hubspot/deals/${dealId}/email-history?group_by_contact=true`)
      .then(r => r.json())
      .then(payload => {
        if (!payload.success) return; // Non-blocking
        const groups = payload.data || [];
        groups.forEach(g => {
          const email = String(g.email || '').toLowerCase();
          const items = g.items || [];
          const card = $('#spLearnersCards .card').filter(function(){
            return $(this).find('.sp-learner-email').text().trim().toLowerCase() === email;
          }).first();
          if (!card.length || items.length === 0) return;
          renderEmailHistory(card, items);
        });
      })
      .catch(() => {});
  }

  function refreshLearnerEmailHistory(dealId, contactEmail) {
    fetch(`/hubspot/deals/${dealId}/email-history?group_by_contact=true`)
      .then(r => r.json())
      .then(payload => {
        if (!payload.success) return; // Non-blocking
        const groups = payload.data || [];
        const targetGroup = groups.find(g => 
          String(g.email || '').toLowerCase() === contactEmail.toLowerCase()
        );
        
        if (targetGroup) {
          const card = $('#spLearnersCards .card').filter(function(){
            return $(this).find('.sp-learner-email').text().trim().toLowerCase() === contactEmail.toLowerCase();
          }).first();
          
          if (card.length) {
            // Remove existing email history section
            card.find('.mt-3').remove();
            // Render updated email history
            renderEmailHistory(card, targetGroup.items || []);
          }
        }
      })
      .catch(() => {});
  }

  function renderEmailHistory(card, items) {
    const container = $('<div class="mt-3"/>');
    container.append('<h6>Recent Emails</h6>');
    const table = $('<table class="table table-sm"><thead><tr><th>When</th><th>Subject</th><th>Preview</th><th></th></tr></thead><tbody></tbody></table>');
    const tbody = table.find('tbody');
    items.slice(0, 10).forEach(it => {
      const when = it.timestamp ? new Date(it.timestamp).toLocaleString('en-GB') : '';
      // Extract subject from the first <strong> tag in the HTML (for notes)
      let subj = it.subject || '';
      let preview = '';
      if (it.html) {
        const tmp = $('<div/>').html(it.html);
        const strong = tmp.find('strong').first();
        if (!subj && strong.length) {
          subj = strong.text().trim();
        }
        // Remove the header block (first two paragraphs) from preview
        const headerDiv = tmp.find('div').first();
        if (headerDiv.length) headerDiv.remove();
        preview = tmp.text().trim().slice(0, 140);
      } else {
        preview = (it.text || '').slice(0, 140);
      }

      const tr = $('<tr/>');
      tr.append(`<td>${when}</td>`);
      tr.append(`<td>${subj || ''}</td>`);
      tr.append(`<td>${preview}</td>`);

      const viewTd = $('<td class="text-end"/>');
      if (it.html) {
        const btn = $('<button class="btn btn-xs btn-outline-secondary" type="button">+</button>');
        const detail = $('<div class="mt-2" style="display:none;"/>');
        detail.html(it.html);
        btn.on('click', function(){
          const isShown = detail.is(':visible');
          if (isShown) {
            detail.hide();
            btn.text('+');
          } else {
            detail.show();
            btn.text('â');
          }
        });
        viewTd.append(btn);
        tr.append(viewTd);
        const detailRow = $('<tr/>');
        const detailCell = $('<td colspan="4"/>');
        detailCell.append(detail);
        detailRow.append(detailCell);
        tbody.append(tr);
        tbody.append(detailRow);
        return; // continue next item
      } else {
        tr.append(viewTd);
      }
      tbody.append(tr);
    });
    container.append(table);
    card.find('.card-body').append(container);
  }
});
</script>

<%- include('../../partials/footer') %>
