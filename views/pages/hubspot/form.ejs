<%- include('../../partials/headerForm') %>
<section class="content-block light-grey">

  <div class="container">
    <div class="jumbotron">
      <h1 class="text-primary text-center"><span class="fa fa-user"></span> ODI Learning Course - Client Bookings</h1>
      <br/>
      <!-- Pills tab menu -->
      <nav>
        <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
        <li class="nav-item" role="presentation">
        <button class="nav-link active" style="margin:1px;" id="pills-home-tab" data-bs-toggle="pill" data-bs-target="#pills-home" type="button" role="tab" aria-controls="pills-home" aria-selected="true">Online</button>
        </li>
        <li class="nav-item" role="presentation">
        <button class="nav-link" style="margin:1px;" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Self-paced</button>
        </li>
      </ul>
      </nav>
      
      <div class="tab-content" id="pills-tabContent">
          <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab" tabindex="0">
            <form action="/hubspot/form" method="POST" id="hubspotForm" name="ODI Learning - Client Bookings">
                
               <!-- Pipeline -->
               <div class="">
                <label class="" style="min-width: 200px;">Pipeline:</label>
                <select name="pipeline" class="" required>
                  <option value="">-- Select Pipeline --</option>
                  <% pipelines.forEach(pipeline => { %>
                    <option value="<%= pipeline.id %>" <%= pipeline.id === defaultPipelineId ? 'selected' : '' %>><%= pipeline.label %></option>
                  <% }) %>
                </select>
              </div>
            
          <br/>
                  <label for="subClientSelect" class="col-sm-3 col-form-label">Sub-client Name:</label><br/>
                  <div style="background-color: #fff; width:50%;padding-top: 1%;">
                    <select id="subClientSelect" name="sub_client" class="" required style="background-color:white;width:100%;">
                      <option value="">-- Select --</option>
                    </select>
                  </div>
                  <br/>
                   <!-- Course location -->
                      <label class="" style="min-width: 200px;">Course Location:</label>
                      <div class="">
                          <input type="radio" class="" name="course_location" value="Online" required>
                          <label class="">Online</label>
                      </div>
                      <div class="">
                          <input type="radio" class="" name="course_location" value="In person" required>
                          <label class="">In Person</label>
                      </div>
                      <br/>
                      <!-- Course Name -->
                  
                  <label class="" style="min-width: 200px;">Course Name:</label>
                  <select name="course_id" id="courseNameSelect" class="" required>
                    <option value="">-- Select --</option>
                    <% products.forEach(product => { %>
                      <option value="<%= product.id %>" data-name="<%= product.name %>"><%= product.name %></option>
                    <% }) %>
                  </select>
                  <input type="hidden" name="course_name" id="courseNameDisplay" value="">
                  <br/>
                 
                  

                      <!-- Date and Time -->
                      <label class="mb-0 mr-2" style="min-width: 200px;">Course Date and Time:</label>
                      <input type="datetime-local" name="course_datetime" class="" required>
                      <br/>
                   
                      <!-- Duration -->
                      <label class="" style="">Course Duration (hours):</label>
                      <input type="number" name="course_duration" class="" required>
                <br/>
  
                  <!-- Tutor Name -->
                <label class="" style="min-width: 200px;">Tutor Name:</label>
                <select name="tutor_name" id="tutorName" class="" required>
                  <option value="">-- Select --</option>
                <% tutors.forEach(tutor => { %>
                   <option value="<%= tutor.first_name %> <%= tutor.last_name %>" data-id="<%= tutor.id %>"><%= tutor.first_name %> <%= tutor.last_name %></option>
                <% }) %>
                </select>
                <br/>

                  <!-- Tutor Email (auto-filled) -->
                <label class="" style="min-width: 200px;">Tutor Email:</label>
                  <input type="email" name="tutor_email" id="tutorEmail" class="" readonly required>
                  <input type="hidden" name="tutor_id" id="tutorId" value="">
                  <br/>

                      <!-- Booking Reference -->
                  <div class="">
                      <label class="" style="min-width: 200px;">Booking Reference Number (optional):</label>
                      <input type="text" name="booking_ref" class="" required>
                    </div>
                  
                <br/>
                  <!-- Client Requestor Name -->
                      <label class="" style="">Client Requestor Name:</label>
                      <div style="background-color: white; width:32%;padding-top: 1%;">
                        <select id="clientRequestorEmail" name="client_requestor" class="" required style="background-color:white;width:100%;">
                        <!--<option value="">-- Select --</option>-->
                        </select>
                      </div>
                      <small class="text-muted" style="font-size: 12px; margin-top: 5px; display: block;">
                        💡 Search for existing clients or type a new name to create a new client. Existing clients will show "(Existing)" and new clients will show "(New Client)".
                      </small>
                  
                    <br/>
                    <!-- Client Requestor Email -->
                    <div class="">
                      <label class="" style="">Client Email (selected):</label>
                      <input type="email" id="clientRequestorEmailDisplay" name="client_requestor_email" class="" readonly required>
                      <input type="hidden" id="clientRequestorId" name="client_requestor_id" value="">
                    </div>
                 <br/>

                      <!-- Value -->
                  <div class="">
                      <label class="" style="min-width: 200px;">Value(£):</label>
                      <input type="number" name="value" class="" required>
                    </div>
                  
                <br/>
                      <!-- Completed By Name -->
                   <div class="">
                      <label class="" style="min-width: 200px;">Form Completed By Name:</label>
                      <input type="text" name="completed_by_name" class="" value="<%= userName%>" required readonly>
                    </div>
                  
                    <!-- Completed By Email -->
                    <div class="">
                      <label class="" style="min-width: 200px;">Form Completed By Email:</label>
                      <input type="email" name="completed_by_email" class="" value="<%= userEmail %>" required readonly>
                    </div>
                  
                  
                <br/>
                <input type="hidden" name="submission_timestamp" id="submissionTimestamp">

                  <div class="">
                    <button type="submit" id="submitBtn" class="">Submit</button>
                  </div>

            </form>
            
            <!-- Async progress table -->
            <div id="asyncProgress" style="display:none; margin-top:20px;">
              <h4>Submission Progress</h4>
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Step</th>
                    <th>Status</th>
                    <th>Result</th>
                  </tr>
                </thead>
                <tbody>
                  <tr id="step-deal">
                    <td>Creating HubSpot deal</td>
                    <td><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> In progress</td>
                    <td id="step-deal-result">&nbsp;</td>
                  </tr>
                  <tr id="step-forecast">
                    <td>Creating Forecast project</td>
                    <td><span class="text-muted">Pending</span></td>
                    <td id="step-forecast-result">&nbsp;</td>
                  </tr>
                  <tr id="step-calendar">
                    <td>Creating calendar entries</td>
                    <td><span class="text-muted">Pending</span></td>
                    <td id="step-calendar-result">&nbsp;</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
      </div>
          <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab" tabindex="0">
            <!-- Sel-paced -->

            <form action="/hubspot/self_paced" method="POST" id="hubspotForm" name="ODI Learning - Client Bookings">

              <!-- Course Name -->
                  
                  <label class="" style="min-width: 200px;">Course Name:</label>
                  <select name="course_id_sp" id="courseNameSelect2" class="" required>
                    <option value="">-- Select --</option>
                    <% products.forEach(product => { %>
                      <option value="<%= product.id %>" data-name="<%= product.name %>"><%= product.name %></option>
                    <% }) %>
                  </select>
                  <input type="hidden" name="course_name_sp" id="courseNameDisplay2" value="">
                  <br/>
                  <!-- Client Requestor Name -->
                      <label class="" style="">Client Requestor Name:</label>
                      <div style="background-color: white; width:32%;padding-top: 1%;">
                        <select id="clientRequestorEmail2" name="client_requestor_sp" class="" required style="background-color:white;width:100%;">
                        <!--<option value="">-- Select --</option>-->
                        </select>
                      </div>
                      <small class="text-muted" style="font-size: 12px; margin-top: 5px; display: block;">
                        💡 Search for existing clients or type a new name to create a new client. Existing clients will show "(Existing)" and new clients will show "(New Client)".
                      </small>
                  
                    <br/>
                    <!-- Client Requestor Email -->
                    <div class="">
                      <label class="" style="">Client Email (selected):</label>
                      <input type="email" id="clientRequestorEmailDisplay2" name="client_requestor_email_sp" class="" readonly required>
                      <input type="hidden" id="clientRequestorId2" name="client_requestor_id_sp" value="">
                    </div>
                 <br/>
                      <!-- Pipeline -->
                  <div class="">
                      <label class="" style="min-width: 200px;">Pipeline:</label>
                      <select name="pipeline_sp" class="" required>
                        <option value="">-- Select Pipeline --</option>
                        <% pipelines.forEach(pipeline => { %>
                          <option value="<%= pipeline.id %>" <%= pipeline.id === defaultPipelineId ? 'selected' : '' %>><%= pipeline.label %></option>
                        <% }) %>
                      </select>
                    </div>
                 <br/>

              <input type="hidden" name="self_paced" id="self_paced" value="self paced">
              <!--<input type="hidden" name="submission_selfpaced" id="submission_selfpaced" value="">-->
              <div class="">
                    <button type="submit" class="">Submit</button>
                  </div>
              

            </form>
            
          </div>
      </div>

      <!-- End of pills tab menu -->
      
    </div>


</section>

<script>
  // Tutor email map
  const tutorEmails = {
    <% tutors.forEach((tutor, index) => { %>
      "<%= tutor.first_name %> <%= tutor.last_name %>": "<%= tutor.email %>"<%= index < tutors.length - 1 ? ',' : '' %>
    <% }) %>
  };

  // Auto-fill tutor email
  document.getElementById('tutorName').addEventListener('change', function () {
    document.getElementById('tutorEmail').value = tutorEmails[this.value] || '';
    const id = this.options[this.selectedIndex] && this.options[this.selectedIndex].getAttribute('data-id');
    document.getElementById('tutorId').value = id || '';
  });

  // Auto-fill course name display
  document.getElementById('courseNameSelect').addEventListener('change', function () {
    const selectedOption = this.options[this.selectedIndex];
    const courseName = selectedOption.getAttribute('data-name') || '';
    document.getElementById('courseNameDisplay').value = courseName;
  });

  // Auto-fill course name display for self-paced
  document.getElementById('courseNameSelect2').addEventListener('change', function () {
    const selectedOption = this.options[this.selectedIndex];
    const courseName = selectedOption.getAttribute('data-name') || '';
    document.getElementById('courseNameDisplay2').value = courseName;
  });
</script>

<script>
  let nextAfter = null;
  const select = document.getElementById('subClientSelect');

  async function loadCompanies(after = null) {
    const res = await fetch(`/hubspot/companies${after ? `?after=${after}` : ''}`);
    const response = await res.json();
    
    // Handle the wrapped API response
    const result = response.data || response;
    const { companies, nextAfter: next } = result;

    companies.forEach(company => {
      const option = document.createElement('option');
      option.value = company.id;
      option.textContent = company.name;
      select.appendChild(option);
    });

    nextAfter = next;

    // Add or update Load More option
    const existing = document.getElementById('loadMoreOption');
    if (nextAfter) {
      if (!existing) {
        const more = document.createElement('option');
        more.id = 'loadMoreOption';
        more.disabled = true;
        more.textContent = '⏳ Scroll to load more...';
        select.appendChild(more);
      }
    } else if (existing) {
      existing.remove(); // No more to load
    }
  }

  // Load first batch on page load
  loadCompanies();

  // Load more on scroll to bottom
  select.addEventListener('scroll', function () {
    const { scrollTop, scrollHeight, clientHeight } = select;
    if (scrollTop + clientHeight >= scrollHeight - 5 && nextAfter) {
      loadCompanies(nextAfter);
    }
  });
</script>

<script>
  $('#subClientSelect').select2({
    theme: 'bootstrap4',
    placeholder: 'Click to search company...',
    minimumInputLength: 2,
    ajax: {
      url: '/hubspot/companies/search',
      delay: 300,
      data: function (params) {
        return {
          q: params.term // search term
        };
      },
      processResults: function (data) {
        // Handle the wrapped API response
        const companies = data.data || data;
        return {
          results: companies.map(company => ({
            id: company.id,
            text: company.name
          }))
        };
      }
    }
  });
</script>

<script>
  $(document).ready(function () {
    $('#clientRequestorEmail').select2({
      theme: 'bootstrap4',
      placeholder: 'Search for existing client or type to create new...',
      tags: true,
      minimumInputLength: 2,
      createTag: function (params) {
        // Don't create tag if it's an existing option
        if (params.term.match(/^[^\s]+\s+[^\s]+$/)) {
          return {
            id: params.term,
            text: params.term + ' (New Client)',
            newOption: true
          };
        }
        return null;
      },
      ajax: {
        url: '/hubspot/contacts/search',
        delay: 300,
        data: function (params) {
          return { q: params.term };
        },
        processResults: function (data) {
          // Handle the wrapped API response
          const contacts = data.data || data;
          return {
            results: contacts.map(contact => ({
              id: contact.id, // Use contact ID as the value
              text: `${contact.first_name} ${contact.last_name} (Existing)`,
              email: contact.email, // Store email separately
              contactId: contact.id // Store contact ID
            }))
          };
        }
      },
      templateResult: function (data) {
        if (data.newOption) {
          return $(`<span style="color: #28a745;"><i class="fa fa-plus-circle"></i> ${data.text}</span>`);
        }
        return data.text;
      },
      templateSelection: function (data) {
        if (data.newOption) {
          return $(`<span style="color: #28a745;">${data.text}</span>`);
        }
        return data.text;
      }
    });

    // Show selected email in display input
    $('#clientRequestorEmail').on('select2:select', function (e) {
      const selectedData = e.params.data;
      
      if (selectedData.newOption) {
        // New client - no contact ID, clear email
        document.getElementById('clientRequestorEmailDisplay').value = '';
        document.getElementById('clientRequestorId').value = '';
        showNewClientNotification(selectedData.text);
      } else {
        // Existing client - set contact ID and email
        document.getElementById('clientRequestorEmailDisplay').value = selectedData.email;
        document.getElementById('clientRequestorId').value = selectedData.contactId;
      }
    });
  });
</script>

<script>
  // Auto-fill client requestor email
  document.addEventListener('DOMContentLoaded', function () {
    const select = document.getElementById('clientRequestorEmail');
    const display = document.getElementById('clientRequestorEmailDisplay');

    if (select && display) {
      $(select).on('select2:select', function (e) {
        const value = e.params.data.id;

        // Check for email pattern in "(email)"
        const emailMatch = value.match(/\(([^)]+)\)$/);

        if (emailMatch) {
          display.value = emailMatch[1];
          display.readOnly = true;
        } else {
          display.value = '';
          display.readOnly = false;
        }
      });

      // Handle manual user input (custom tag)
      $(select).on('change', function (e) {
        const selectedText = $(this).val();

        // If no parentheses pattern, assume manual entry
        if (!selectedText.includes('(')) {
          display.value = '';
          display.readOnly = false;
        }
      });
    }
  });
</script>

<!-- Self Paced Form -->
 <script>
  $(document).ready(function () {
    $('#clientRequestorEmail2').select2({
      theme: 'bootstrap4',
      placeholder: 'Search for existing client or type to create new...',
      tags: true,
      minimumInputLength: 2,
      createTag: function (params) {
        // Don't create tag if it's an existing option
        if (params.term.match(/^[^\s]+\s+[^\s]+$/)) {
          return {
            id: params.term,
            text: params.term + ' (New Client)',
            newOption: true
          };
        }
        return null;
      },
      ajax: {
        url: '/hubspot/contacts/search',
        delay: 300,
        data: function (params) {
          return { q: params.term };
        },
        processResults: function (data) {
          // Handle the wrapped API response
          const contacts = data.data || data;
          return {
            results: contacts.map(contact => ({
              id: contact.id, // Use contact ID as the value
              text: `${contact.first_name} ${contact.last_name} (Existing)`,
              email: contact.email, // Store email separately
              contactId: contact.id // Store contact ID
            }))
          };
        }
      },
      templateResult: function (data) {
        if (data.newOption) {
          return $(`<span style="color: #28a745;"><i class="fa fa-plus-circle"></i> ${data.text}</span>`);
        }
        return data.text;
      },
      templateSelection: function (data) {
        if (data.newOption) {
          return $(`<span style="color: #28a745;">${data.text}</span>`);
        }
        return data.text;
      }
    });

    // Show selected email in display input
    $('#clientRequestorEmail2').on('select2:select', function (e) {
      const selectedData = e.params.data;
      
      if (selectedData.newOption) {
        // New client - no contact ID, clear email
        document.getElementById('clientRequestorEmailDisplay2').value = '';
        document.getElementById('clientRequestorId2').value = '';
        showNewClientNotification(selectedData.text);
      } else {
        // Existing client - set contact ID and email
        document.getElementById('clientRequestorEmailDisplay2').value = selectedData.email;
        document.getElementById('clientRequestorId2').value = selectedData.contactId;
      }
    });
  });
</script>

<script>
  // Auto-fill client requestor email
  document.addEventListener('DOMContentLoaded', function () {
    const select = document.getElementById('clientRequestorEmail2');
    const display = document.getElementById('clientRequestorEmailDisplay2');

    if (select && display) {
      $(select).on('select2:select', function (e) {
        const value = e.params.data.id;

        // Check for email pattern in "(email)"
        const emailMatch = value.match(/\(([^)]+)\)$/);

        if (emailMatch) {
          display.value = emailMatch[1];
          display.readOnly = true;
        } else {
          display.value = '';
          display.readOnly = false;
        }
      });

      // Handle manual user input (custom tag)
      $(select).on('change', function (e) {
        const selectedText = $(this).val();

        // If no parentheses pattern, assume manual entry
        if (!selectedText.includes('(')) {
          display.value = '';
          display.readOnly = false;
        }
      });
    }
  });
</script>

<script>
  // Set submission date/time in ISO format (e.g., 2024-03-27T15:42:00Z)
  document.getElementById('submissionTimestamp').value = new Date().toISOString();
  
  // Function to show notification for new client creation
  function showNewClientNotification(clientName) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'alert alert-info alert-dismissible fade show';
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.zIndex = '9999';
    notification.style.minWidth = '300px';
    notification.innerHTML = `
      <strong>🆕 New Client Created!</strong><br>
      "${clientName}" will be created as a new client when the form is submitted.
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 5000);
  }
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
  // Functional async form submission with proper step sequencing
  (function(){
    const form = document.querySelector('#pills-home form#hubspotForm');
    if (!form) return;

    // Utility functions for UI updates
    const updateStepStatus = (stepId, status, message = '') => {
      const statusCell = document.querySelector(`#${stepId} td:nth-child(2)`);
      const resultCell = document.getElementById(`${stepId}-result`);
      
      if (statusCell) {
        statusCell.innerHTML = status;
      }
      if (resultCell && message) {
        resultCell.innerHTML = message;
      }
    };

    const setStepInProgress = (stepId) => {
      updateStepStatus(stepId, '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> In progress');
    };

    const setStepSuccess = (stepId, message) => {
      updateStepStatus(stepId, '<span class="text-success">Done</span>', message);
    };

    const setStepError = (stepId, message) => {
      updateStepStatus(stepId, '<span class="text-danger">Failed</span>', message);
    };

    // API call wrapper with error handling
    const apiCall = async (url, payload) => {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      
      const json = await response.json();
      
      if (!response.ok || json.success === false) {
        const errorMessage = (json && (json.message || json.error)) || 'API call failed';
        throw new Error(errorMessage);
      }
      
      return json.data || json;
    };

    // Step 1: Create HubSpot deal
    const createHubSpotDeal = async (payload) => {
      setStepInProgress('step-deal');
      
      try {
        const data = await apiCall('/hubspot/ajax/create-deal', payload);
        const dealId = data.id;
        const dealUrl = data.url;
        
        const message = dealUrl 
          ? `Deal: <a href="${dealUrl}" target="_blank">${dealId}</a>`
          : `Deal ID: ${dealId}`;
        
        setStepSuccess('step-deal', message);
        return { dealId, dealUrl };
      } catch (error) {
        setStepError('step-deal', error.message);
        throw error; // Re-throw to stop the chain
      }
    };

    // Step 2: Create Forecast project
    const createForecastProject = async (payload, dealUrl) => {
      setStepInProgress('step-forecast');
      
      try {
        let forecastDescription = `Booking reference: ${payload.booking_ref}`;
        if (dealUrl && dealUrl.includes('hubspot')) {
          forecastDescription += `\nHubspot link: ${dealUrl}`;
        }

        const forecastPayload = {
          client_name: payload.sub_client ? $('#subClientSelect option:selected').text() : '',
          course_name: payload.course_name,
          course_date: (payload.course_datetime || '').split('T')[0],
          course_location: payload.course_location,
          tutor_id: payload.tutor_id,
          course_duration_hours: payload.course_duration,
          budget: payload.value,
          description: forecastDescription
        };

        const data = await apiCall('/forecast/projects/course', forecastPayload);
        const project = data.project;
        const projectIdForView = data.project_view_id || project?.id;
        
        const message = `Project ID: <a href="https://app.forecast.it/project/${projectIdForView}" target="_blank">${projectIdForView}</a>`;
        setStepSuccess('step-forecast', message);
        
        return { projectId: projectIdForView };
      } catch (error) {
        setStepError('step-forecast', error.message);
        throw error; // Re-throw to stop the chain
      }
    };

    // Step 3: Create Calendar event
    const createCalendarEvent = async (payload) => {
      setStepInProgress('step-calendar');
      
      try {
        const calendarPayload = {
          client_name: payload.sub_client ? $('#subClientSelect option:selected').text() : '',
          course_name: payload.course_name,
          course_datetime: payload.course_datetime,
          course_location: payload.course_location,
          booking_ref: payload.booking_ref,
          course_duration: payload.course_duration,
          tutor_email: payload.tutor_email
        };

        const data = await apiCall('/calendar/events/training', calendarPayload);
        
        // Handle the response structure from GoogleCalendarController
        const eventUrl = data.url || data.htmlLink;
        const eventSummary = data.summary || 'Calendar Event Created';
        
        const message = eventUrl 
          ? `Event: <a href="${eventUrl}" target="_blank">${eventSummary}</a>`
          : `Event: ${eventSummary}`;
        
        setStepSuccess('step-calendar', message);
        
        return { eventId: data.id, eventUrl: eventUrl };
      } catch (error) {
        setStepError('step-calendar', error.message);
        throw error; // Re-throw to stop the chain
      }
    };

    // Main form submission handler
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = document.getElementById('submitBtn');
      submitBtn.disabled = true;
      document.getElementById('asyncProgress').style.display = 'block';
      
      // Reset all step statuses
      updateStepStatus('step-deal', '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> In progress', '&nbsp;');
      updateStepStatus('step-forecast', 'Pending', '&nbsp;');
      updateStepStatus('step-calendar', 'Pending', '&nbsp;');

      // Collect form data
      const formData = new FormData(form);
      const payload = Object.fromEntries(formData.entries());

      try {
        // Execute steps sequentially - each waits for the previous
        const dealResult = await createHubSpotDeal(payload);
        const forecastResult = await createForecastProject(payload, dealResult.dealUrl);
        const calendarResult = await createCalendarEvent(payload);
        
        // All steps completed successfully
        console.log('All steps completed successfully:', {
          deal: dealResult,
          forecast: forecastResult,
          calendar: calendarResult
        });
        
      } catch (error) {
        // Error handling is done in individual step functions
        console.error('Form submission failed:', error);
      } finally {
        submitBtn.disabled = false;
      }
    });
  })();
</script>






<%- include('../../partials/footer') %>
